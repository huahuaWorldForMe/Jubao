<?php/** * Created by PhpStorm. * User: diannao * Date: 2018/6/13 * Time: 18:26 */namespace app\admin\controller;use app\admin\controller\Base;use think\Controller;use think\Db;define('JUBAO_STATUS_WAITING_DISPATCH', 0);define('JUBAO_STATUS_WAITING_HANDLE', 1);define('JUBAO_STATUS_COMPLETE', 2);define('JUBAO_STATUS_FOUJUE', 3);define('JUBAO_STATUS_HIDE', 9);class Jubao extends Base{//    public function jubao_list()//    {//        $db = Db::name('jubao')->order('post_time', 'desc')->limit(0, 10)->select();//        $this->assign('jubao_list',$db);//        return $this->fetch();//    }    public function dispatch_list()    {        return $this->jubao_list('1');    }    public function handle_list()    {        return $this->jubao_list('2');    }    public function hide_list()    {        return $this->jubao_list('9');    }    public function jubao_list($filter_status = '')    {        $searchKey = input('key');        $catid = input('catid');        $status = input('status');        $uid = session('admin_auth.aid');        $start_date = input('inner_start_date_start');        $end_date = input('inner_start_date_end');        $where = array('jubao_show' => 0);        $where_admin = array();        if ($uid > 2) {            $group = Db::name('auth_group_access')->where('uid', $uid)->find();//选找到对应的组，然后下面查询匹配对应组的数据            $where_admin['jubao_owner_group_id'] = $group['group_id'];            $where['jubao_owner_group_id'] = $group['group_id'];        }        if ($catid) {            $where['jubao_catid'] = $catid;        }        $is_other_status = false;//if is other status filter ,should not show the status selector in view        if ($filter_status !== '') {            $status = $filter_status;            $is_other_status = true;        }        if ($status) {            if (intval($status) == 9) {                $where['jubao_show'] = 1;                $where['status'] = 9;            } else                $where['status'] = intval($status) - 1;        } else $status = '-1';        $member_model = new \app\admin\model\Jubao();        $cats = Db::name('category')->select();        $query = $member_model            ->alias('a')            ->join(config('database.prefix') . 'category b', 'a.jubao_catid =b.catid')            ->where($where)            ->where('jubao_sjhm', 'like', "%" . $searchKey . "%");        if ($searchKey) {            $query = $query->whereOr('jubao_wfcph', 'like', "%" . $searchKey . "%")                ->whereOr('jubao_no', 'like', "%" . $searchKey . "%");        }        if ($start_date && $end_date && '起始日期' !== $start_date && '结束日期' !== $end_date) {            $start_date = str_replace('+', ' ', $start_date);            $end_date = str_replace('+', ' ', $end_date);            $query = $query->whereBetween('post_time', [strtotime($start_date), strtotime($end_date)]);        }        $jubao_list = $query->order('post_time desc')->paginate(config('paginate.list_rows'), false, ['query' => get_query()]);        $show = $jubao_list->render();        if ($uid == 14)            echo $query->getLastSql();        $show = preg_replace("(<a[^>]*page[=|/](\d+).+?>(.+?)<\/a>)", "<a href='javascript:ajax_page($1);'>$2</a>", $show);        foreach ($jubao_list as $key => $jubao) {            if ($jubao['status'] == 0)                $jubao_list[$key]['spend_time'] = time() - $jubao['post_time'];            else if ($jubao['status'] == 1)                $jubao_list[$key]['spend_time'] = time() - $jubao['post_time'];            else if ($jubao['status'] == 2) {                $jubao_list[$key]['spend_time'] = $jubao['finish_time'] - $jubao['post_time'];            } else {                $jubao_list[$key]['spend_time'] = $jubao['finish_time'] - $jubao['post_time'];            }            if ($jubao_list[$key]['spend_time'] > 60) {                $min = intval($jubao_list[$key]['spend_time'] / 60);                $seconds = $jubao_list[$key]['spend_time'] - $min * 60;                $jubao_list[$key]['spend_time'] = '' . $min . '分' . $seconds . '秒';            } else {                $jubao_list[$key]['spend_time'] = '' . ($jubao_list[$key]['spend_time']) . '秒';            }            if ($jubao['status'] == 9) {                $jubao_list[$key]['spend_time'] = '已失效';            }        }        $dfp_count = $member_model->where($where_admin)->where('status', 0)->count();        $dcl_count = $member_model->where($where_admin)->where('status', 1)->count();        $ycl_count = $member_model->where($where_admin)->where('status', 2)->count();        $this->assign('dcl_count', $dcl_count);        $this->assign('ycl_count', $ycl_count);        $this->assign('dfp_count', $dfp_count);        $this->assign('catid', $catid);        $this->assign('status', $status);        $this->assign('is_other_status', $is_other_status ? 1 : 0);        $this->assign('cats', $cats);        $this->assign('show_handle', ($uid > 2) ? 1 : 0);        $this->assign('jubao_list', $jubao_list);        $this->assign('page', $show);        if ($searchKey == '0') {            $key = '';        }        $this->assign('val', $searchKey);        if (request()->isAjax()) {            return $this->fetch('ajax_jubao');        } else {            return $this->fetch();        }    }    public function jubao_handle()    {        $id = input('id');        $page = input('page');        $status = input('status');        $catid = input('catid');        $in_handle_list = input('in_handle_list');        $onlyLook = input('onlyLook');        $jubao_info = Db::name('jubao')->alias('a')->join(config('database.prefix') . 'category b', 'a.jubao_catid =b.catid')->where('id', $id)->find();        if ($jubao_info) {            $images = explode(',', $jubao_info['jubao_image']);            if (is_array($images)) {                if ($images[sizeof($images) - 1] == "")                    $jubao_info['images'] = array_slice($images, 0, sizeof($images) - 1);                else                    $jubao_info['images'] = $images;            } else {                $jubao_info['images'] = array($jubao_info['images']);            }            $logs = Db::name('jubao_log')->where('jubao_id', $id)->select();            $options = Db::name('feedback_option')->select();            $this->assign('feedback_option', $options);            $this->assign('logs', $logs);            $this->assign('jubao', $jubao_info);            $this->assign('onlyLook', $onlyLook);            $this->assign('page', $page);            $this->assign('status', $status);            $this->assign('catid', $catid);            $this->assign('in_handle_list', $in_handle_list);            return $this->fetch();        } else {            $this->error('举报信息不存在', url('admin/Jubao/jubao_list'));        }    }    public function jubao_dispatch()    {        $id = input('id');        $page = input('page');        $status = input('status');        $catid = input('catid');        $in_dispatch_list = input('in_dispatch_list');        $jubao_info = Db::name('jubao')->alias('a')->join(config('database.prefix') . 'category b', 'a.jubao_catid =b.catid')->where('id', $id)->find();        if ($jubao_info) {//            $admin_list=Db::name('admin')->where('admin_id','>',1)->order('admin_id')->select();            $auth_group = Db::name('auth_group')->where('id', '>', '2')->select();            $images = explode(',', $jubao_info['jubao_image']);            if (is_array($images)) {                if ($images[sizeof($images) - 1] == "")                    $jubao_info['images'] = array_slice($images, 0, sizeof($images) - 1);                else                    $jubao_info['images'] = $images;            } else {                $jubao_info['images'] = array($jubao_info['images']);            }            $logs = Db::name('jubao_log')->where('jubao_id', $id)->select();            $this->assign('logs', $logs);            $this->assign('auth_group', $auth_group);            $this->assign('jubao', $jubao_info);            $this->assign('page', $page);            $this->assign('status', $status);            $this->assign('catid', $catid);            $this->assign('in_dispatch_list', $in_dispatch_list);            $this->assign('', $jubao_info);            return $this->fetch();        } else {            $this->error('举报信息不存在', url('admin/Jubao/jubao_list'));        }    }    public function jubao_rundel()    {        $id = input('id');        $feedback = input('feedback');        $jubao_info = Db::name('jubao')->alias('a')->join(config('database.prefix') . 'category b', 'a.jubao_catid =b.catid')->where('id', $id)->find();        if ($jubao_info) {//            $result = Db::name('jubao')->where('id', $id)->delete();            $update_info = array(                'jubao_show' => 1,                'status' => JUBAO_STATUS_HIDE            );            $result = \app\admin\model\Jubao::update($update_info, array('id' => $id));            if ($result) {                $admin = $this->getAdmin();                jubao_log($id, $admin['admin_realname'] . '已经将举报隐藏');//                header('Location:'.url('admin/Jubao/jubao_list'));                $this->success('隐藏成功', url('admin/Jubao/jubao_list'));            }        } else {            $this->error('举报信息不存在', url('admin/Jubao/jubao_list'));        }    }    public function jubao_runhandle()    {        $id = input('id');        $feedback = input('feedback');        $jubao_wuxiao = input('jubao_wuxiao');        $feedback_id = input('feedback_id');        $catid = input('catid');        $in_handle_list = 1 === intval(input('in_handle_list'));        $page = input('page');        $status = input('status');        if (intval($jubao_wuxiao) == 1) {            $feedback = '举报无效';        }        $feedbackItem = Db::name('feedback_option')->where('id', $feedback_id)->find();        if ($feedbackItem) {            $feedback = $feedbackItem['feedback_content'];        }        $jubao_info = Db::name('jubao')->alias('a')->join(config('database.prefix') . 'category b', 'a.jubao_catid =b.catid')->where('id', $id)->find();        if ($jubao_info) {            $update_info = array(                'feedback' => $feedback,                'handle_admin_id' => $this->getAdmin()['admin_id'],                'handle_time' => time(),                'finish_time' => time(),                'status' => JUBAO_STATUS_COMPLETE            );            $result = \app\admin\model\Jubao::update($update_info, array('id' => $id));            if ($result) {//                header('Location:'.url('admin/Jubao/jubao_list'));//                $admin = Db::name('admin')->where('admin_id', $jubao_info['jubao_owner_admin_id'])->find();                $admin = $this->getAdmin();                jubao_log($id, $admin['admin_realname'] . '已经处理举报，处理意见：' . $feedback);                $api = new \app\api\controller\Index();                $push_result = $api->sendTemplate($id, '您好，您的举报' . $jubao_info['jubao_no'] . '已成功处理！', true);                jubao_log($id, ('系统已经推送给举报人处理结果：' . ($push_result ? '成功' : "失败")));                $url = $in_handle_list ? 'handle_list' : 'jubao_list';                $url = $url . '?page=' . $page . '&status=' . $status . '&catid=' . $catid;                $this->success('反馈处理成功', $url, '', 3, [], true);//                $this->success('反馈处理成功', url('admin/Jubao/handle_list', array('catid', $catid)));            }        } else {            $this->error('举报信息不存在', url('admin/Jubao/handle_list', array('catid', $catid)));        }    }    private function getAdmin()    {        $uid = session('admin_auth.aid');        return $this->getAdminById($uid);    }    private function getAdminById($uid)    {        $admin = Db::name('admin')->where('admin_id', $uid)->find();        if (!$admin['admin_realname']) {            $admin['admin_realname'] = $admin['admin_username'];        }        return $admin;    }    /**     * 获取用户所属组     * @param $uid     * @return array|false|\PDOStatement|string|\think\Model     */    private function getAdminGroup($uid)    {        $group = Db::name('auth_group_access')->where('uid', $uid)->find();//get group_id by admin_access_group        $admin=array();        if ($group) {            $admin = Db::name('auth_group')->where('id', $group['group_id'])->find();        }        return $admin;    }    public function jubao_rundispatch()    {        $id = input('id');        $owner_admin_id = input('admin_id');        $group_id = input('group_id');        $catid = input('catid');        $is_in_dispatch_list = 1 === intval(input('in_dispatch_list'));        $page = input('page');        $status = input('status');        $jubao_info = Db::name('jubao')->alias('a')->join(config('database.prefix') . 'category b', 'a.jubao_catid =b.catid')->where('id', $id)->find();        if ($jubao_info) {//待分配            $update_info = array(                'jubao_owner_admin_id' => $owner_admin_id,                'dispatch_admin_id' => $this->getAdmin()['admin_id'],                'jubao_owner_group_id' => $group_id,                'jubao_dispatch_time' => time(),                'status' => JUBAO_STATUS_WAITING_HANDLE            );            $result = \app\admin\model\Jubao::update($update_info, array('id' => $id));            if ($result) {                $admin = Db::name('auth_group')->where('id', $group_id)->find();//                header('Location:'.url('admin/Jubao/jubao_list'));                jubao_log($id, '管理员' . $this->getAdmin()['admin_realname'] . '已经将举报信息分配给' . $admin['title']);                $api = new \app\api\controller\Index();                $push_result = $api->sendTemplate($id, '您好，您的举报' . $jubao_info['jubao_no'] . '已成功分配给' . $admin['title'] . '！', true);                jubao_log($id, ('系统已经推送给举报人处理结果：' . ($push_result ? '成功' : "失败")));                $url = $is_in_dispatch_list ? 'dispatch_list' : 'jubao_list';                $url = $url . '?page=' . $page . '&status=' . $status . '&catid=' . $catid;                $this->success('分配成功', $url, '', 3, [], true);            }        } else {            $this->error('举报信息不存在', url($is_in_dispatch_list ? 'admin/Jubao/dispatch_list' : 'admin/Jubao/jubao_list'));        }    }    public function voice_download()    {        $id = input('id');        $jubao_info = Db::name('jubao')->where('id', $id)->find();        if ($jubao_info) {            $imageDownloader = new PackageTest();            $imageDownloader->packageImages(array($jubao_info['jubao_voice']));        } else {            $this->error('举报信息不存在', '');        }    }    public function exportNotDispatchExcel()    {        $this->exportExcel(JUBAO_STATUS_WAITING_DISPATCH);    }    public function exportNotHandle()    {        $this->exportExcel(JUBAO_STATUS_WAITING_HANDLE);    }    public function exportDone()    {        $this->exportExcel(JUBAO_STATUS_COMPLETE);    }    public function exportExcel($status = '')    {        $expTitle = 'JubaoInfo';        $expCellName = array(            array('id', '序号'),            array('jubao_no', '举报编号'),            array('catname', '举报应用'),            array('from_user_name', '举报人姓名'),            array('from_user_phone', '举报人手机'),            array('jubao_wzsj', '违法时间'),            array('jubao_wfdd', '违法地点'),            array('jubao_wfcph', '违法车牌号'),            array('post_time', '提交时间'),            array('jubao_sjhm', '违法手机号'),            array('dispatch_admin_group', '分配部门'),            array('dispatch_admin_realname', '分配人员'),            array('handle_admin_group', '处理部门'),            array('handle_admin_realname', '处理人员'),            array('feedback', '处理意见'),            array('status', '状态'),        );        $member_model = new \app\admin\model\Jubao();        $query = $member_model            ->alias('a')            ->join(config('database.prefix') . 'category b', 'a.jubao_catid =b.catid')            ->join(config('database.prefix') . 'bind c', 'a.from_user =c.from_user', "LEFT OUTER")            ->field(array('a.id',                'a.post_time',                'a.jubao_wfcph',                'a.jubao_wzsj',                'a.jubao_wfdd',                'a.dispatch_admin_id',                'a.handle_admin_id',                'a.jubao_sjhm',                'a.jubao_no',                'a.status',                'a.feedback',                'b.catname',                'c.from_user_phone',                'c.from_user_name'));        if ($status !== '') {            $query = $query->where('status', $status);            if ($status == JUBAO_STATUS_COMPLETE) {                $query = $query->whereOr('status', JUBAO_STATUS_FOUJUE);            }        }        $jubao_list = $query->order('post_time desc')->select();//        echo $status;//echo $query->getLastSql();//exit();//var_dump($jubao_list);        foreach ($jubao_list as $key => $value) {            $dispatch_admin = $this->getAdminById($value['dispatch_admin_id']);            $handle_admin = $this->getAdminById($value['handle_admin_id']);            $jubao_list[$key]['post_time'] = date("Y-m-d", $value['post_time']);//            $jubao_list[$key]['handle_time'] = date("Y-m-d", $value['handle_time']);//            $jubao_list[$key]['finish_time'] = date("Y-m-d", $value['finish_time']);            $jubao_list[$key]['status'] = $this->getStatus($value['status']);//            var_dump($dispatch_admin);            if ($value['dispatch_admin_id']) {                $jubao_list[$key]['dispatch_admin_group'] = $this->getAdminGroup($value['dispatch_admin_id'])['title'];                $jubao_list[$key]['dispatch_admin_realname'] = $dispatch_admin['admin_realname'];            } else {                $jubao_list[$key]['dispatch_admin_group'] = '系统(老数据)';                $jubao_list[$key]['dispatch_admin_realname'] = '系统(老数据)';            }            if ($value['handle_admin_id']) {                $handle_admin_user = $this->getAdminGroup($handle_admin['admin_id']);//                echo $handle_admin['admin_id'];//                var_dump($handle_admin_user);//                exit();                $jubao_list[$key]['handle_admin_group'] = $handle_admin_user['title'];                $jubao_list[$key]['handle_admin_realname'] = $handle_admin['admin_realname'];            } else {                $jubao_list[$key]['handle_admin_group'] = '系统(老数据)';                $jubao_list[$key]['handle_admin_realname'] = '系统(老数据)';            }        }        $xlsTitle = iconv('utf-8', 'gb2312', $expTitle);//文件名称        $fileName = session('uid') . date('_YmdHis');//or $xlsTitle 文件名称可根据自己情况设定        $cellNum = count($expCellName);        $dataNum = count($jubao_list);//        vendor("PHPExcel.PHPExcel");        $objPHPExcel = new \PHPExcel();        $cellName = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AZ');        $objPHPExcel->getActiveSheet(0)->mergeCells('A1:' . $cellName[$cellNum - 1] . '1');//合并单元格        $objPHPExcel->setActiveSheetIndex(0)->setCellValue('A1', $expTitle . '  Export time:' . date('Y-m-d H:i:s'));        for ($i = 0; $i < $cellNum; $i++) {            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($cellName[$i] . '2', $expCellName[$i][1]);        }        // Miscellaneous glyphs, UTF-8        for ($i = 0; $i < $dataNum; $i++) {            for ($j = 0; $j < $cellNum; $j++) {                $objPHPExcel->getActiveSheet(0)->setCellValue($cellName[$j] . ($i + 3), $jubao_list[$i][$expCellName[$j][0]]);            }        }        header('pragma:public');        header('Content-type:application/vnd.ms-excel;charset=utf-8;name="' . $xlsTitle . '.xls"');        header("Content-Disposition:attachment;filename=$fileName.xls");//attachment新窗口打印inline本窗口打印        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');        $objWriter->save('php://output');//        header('Location:'.url('admin/Jubao/jubao_list'));        exit;    }    private function getStatus($status)    {        switch (intval($status)) {            case 0:                $status = '已提交';                break;            case 1:                $status = '待处理';                break;            case 2:                $status = '已处理';                break;            case 3:                $status = '已完成';                break;            case '9':                $status = '已隐藏';                break;            default:                $status = '未知';                break;        }        return $status;    }}